#!/usr/bin/env zsh
#
# Intelligent tmux helper
#
# This is sort of like a t=tmux alias in that it can be used in almost
# the same way as tmux to run tmux commands; but it also falls back to
# session creation/attachment if the command doesn't exist.  And if no
# arguments are passed, then a session is created/attached based on the
# hostname, workspace name, or TSESSION environment variable.  So:
#
#   t ls
#
# lists sessions;
#
#   t foo
#
# creates and/or attaches a session called 'foo'; and
#
#   t
#
# creates and/or attaches to a session called $HOST or workspace name, or
# $TSESSION.
#
# This also has additional functionality to automatically update an
# existing server's AFS tokens, run the server in a separate scope when
# systemd is available so it doesn't get killed on logout, and run
# safely and intuitively inside a tmux session.
#

if [[ ! -x $(whence tmux) ]]; then
    print "tmux is not installed" >&2
    exit 1
fi

tmux_commands=($(TMUX='' tmux list-commands | gawk '{ gsub("[()]", "", $2); print $1; print $2 }'))

is_windows_admin() {
    [[ $OS == 'Windows_NT' ]] && id -Gnz | tr '\0' '\n' | grep -q '^Administrators$'
}

exec_tmux() {
    local -a socket_name

    if is_windows_admin; then
        socket_name=(-L admin)
    fi

    if tmux "${socket_name[@]}" list-sessions > /dev/null 2>&1; then
        if [[ ! $TMUX ]]; then
            # Store *outside* TERM inside tmux
            tmux "${socket_name[@]}" set-environment -g TERM "$TERM"

            # Ensure the tmux server has the latest Kerberos ticket cache and
            # that it always has up-to-date AFS tokens.
            if [[ $KRB5CCNAME ]]; then
                tmux "${socket_name[@]}" set-environment KRB5CCNAME "$KRB5CCNAME"
                if [[ -x $(whence aklog) ]]; then
                    tmux "${socket_name[@]}" run-shell aklog
                fi
            else
                tmux "${socket_name[@]}" set-environment -r KRB5CCNAME
            fi
        fi
    elif systemctl --user > /dev/null 2>&1; then
        systemctl --user stop tmux.scope 2>/dev/null
        exec systemd-run --user --scope --unit tmux tmux "$@"
    fi

    exec tmux "${socket_name[@]}" "$@"
}

tmux_new_session() {
    local name="$1"
    shift

    if [[ $TMUX ]]; then
        tmux new-session -d -s "$name" "$@" 2>/dev/null

        # When running outside of tmux, new-session has the ability to detach
        # all clients currently attached to the session if it already exists.
        # When running inside of tmux, that flag doesn't work, so the following
        # detects when '-D' is passed, removes '-D' from the list of arguments,
        # and detaches the other clients explicitly.
        local -a detach
        zparseopts -D -E D=detach
        if [[ $detach ]]; then
            local self="$(tmux display-message -p '#{client_tty}')"
            for client in $(tmux list-clients -F '#{client_tty}' -t "$name" | grep -F -v "$self"); do
                tmux detach-client -t "$client"
            done
        fi

        tmux switch-client -t "$name"
    else
        exec_tmux new-session -A -s "$name" "$@"
    fi
}

# Generate a meaningful session name, defaulting to the short hostname of the
# system (useful for identifying remote tmux sessions).  If tmux is running
# locally, then it is more meaningful to create sessions based on the name of
# the workspace it's launched from.  If a workspace by that name is already
# attached, then add '-scratch' to the name.  Any further handling of attached
# session names is not done because I shouldn't allow myself to launch multiple
# sessions in a single workspace.  All of this can be overridden by the
# TSESSION environment variable.
default_session_name() {
    local name="${HOST%%.*}"

    if [[ $TSESSION ]]; then
        name="$TSESSION"
    elif [[ $DISPLAY == ':0' ]]; then
        local _NET_CURRENT_DESKTOP _NET_DESKTOP_NAMES
        eval "$(xprop -root -notype _NET_CURRENT_DESKTOP 2>/dev/null | sed 's/ = /=/')"
        eval "$(xprop -root -notype _NET_DESKTOP_NAMES 2>/dev/null | sed 's/ = /=(/; s/,//g; s/$/)/')"

        if [[ $_NET_CURRENT_DESKTOP && $_NET_DESKTOP_NAMES ]]; then
            local current_desktop="${_NET_DESKTOP_NAMES[$_NET_CURRENT_DESKTOP + 1]}"
            if [[ $current_desktop ]]; then
                name="$current_desktop"

                if [[ ! $TMUX ]]; then
                    local session_clients="$(tmux list-clients -t "$name")"
                    if [[ $session_clients ]]; then
                        name="${name}-scratch"
                    fi
                fi
            fi
        fi
    elif is_windows_admin; then
        name="${name}-admin"
    fi

    print "$name"
}

if (( ARGC == 0 )); then
    tmux_new_session "$(default_session_name)"
elif (( tmux_commands[(I)${1}*] )) || [[ $1 == -* ]]; then
    exec_tmux "$@"
else
    tmux_new_session "$@"
fi
